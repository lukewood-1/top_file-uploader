// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Summary: users necessarity upload their files into the File model. They can also create folders, which will belong to themselves only, and they can associate their files to ONE of their created folders.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("prisma_provider_url")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model User {
  id       Int    @id @default(autoincrement())
  username String @unique @db.VarChar(255)
  password String @unique @db.VarChar(255)

  files   File[]
  folders Folder[]
  shareableLinks shareableLink[]
}

model File {
  id         Int   @id @default(autoincrement())
  name       String @db.VarChar(255)
  file       Bytes
  uploadTime String
  uploadDate String
  size String
  path String @db.VarChar(255)

  fileOwner Int
  userId    User @relation(fields: [fileOwner], references: [id])

  fileFolder Int
  folderId   Folder? @relation(fields: [fileFolder], references: [id])
}

model Folder {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)

  files File[]
  shareableLink shareableLink[]

  folderOwner Int
  userId      User @relation(fields: [folderOwner], references: [id])

  parentId Int?
  parentFolder Folder? @relation("folderHierarchy", fields: [parentId], references: [id])
  children Folder[] @relation("folderHierarchy")
}

model shareableLink {
  id Int @id @default(autoincrement())
  link String @default(uuid())

  expirationDate DateTime @default(now())

  sharedFolder Int
  folderId Folder @relation(fields: [sharedFolder], references: [id])

  linkOwner Int
  userId User @relation(fields: [linkOwner], references: [id])
}